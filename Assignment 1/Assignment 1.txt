1. Write a Java Program to find GCD of two given numbers.

import java.lang.*;
import java.util.*;

class GCD{

public static int gfc(int x,int y){

if (y==0)
return x;
else 
return gfc(y,Math.abs(x-y)); // Here we are using Euclidean Algorithm (of repetaed Subtraction)

}

public static void main(String[] args){

int a = 25;
int b = 50;

System.out.println(gfc(a,b));

}
}

// with help of algorithm we are subtracting the values of x & y and storing it on gfc(int y) and also storing 

// y value at gfc (int x)  .  then we are performing recursion on that values repetedley till gfc(int y) value 
//becomes 0. then with the help of the termination statement /base case we return the value of gfc(int x);

// 

=========================================================================================

2. Write a java program to LCM of TWO given number.

import java.lang.*;
import java.util.*;

class Lcm{

public static int gfc(int x,int y){

if (y==0)
return x;
else 
return gfc(y,Math.abs(x-y)); // Here we are using Euclidean Algorithm (of repetaed Subtraction)

}

public static int lcm(int x,int y){

return (x /gfc(x,y))*y; // here we are using GCD formula to find the value of lcm

}


public static void main(String[] args){

int a = 25;
int b = 50;

System.out.println(lcm(a,b));

}
}

// with help of algorithm we are subtracting the values of x & y and storing it on gfc(int y) and also storing 

// y value at gfc (int x)  .  then we are performing recursion on that values repetedley till gfc(int y) value 
//becomes 0. then with the help of the termination statement /base case we return the value of gfc(int x);

=================================================================================================


3. Write a Java Program to print all the Prime Factors of the Given Number.

import java.lang.*;
import java.util.*;

class Primef {
    public static void prime(int x, int y) {

if (x==0) {

return;
}      

      if (x <= 1) {
            return;
        }
        if (y > x) {
            return;
        }
        if (x % y == 0) {
            System.out.println(y);
            prime(x / y, y);
        } else {
            prime(x, y + 1);
        }
    }

    public static void main(String[] args) {
        int a = 30;
        System.out.println("Prime factors of " + a + " are:");
        prime(a, 2);
    }
}
//  Prime factor here we are first look at the modulus of given no by 2 if its 0 then we divide the x/y in prime(x/y,y).

// else we increse the y value by 1 in prime(x,y+1) Base case is  0 we stop recursion.
============================================================================================

4. Check whether the Given Numberis a Palindrome or NOT.

import java.lang.*;
import java.util.*;

class pd{

public static int palindrome(int n,int t){

if (n==0)
return 0;

t = (t*10) + (n%10);
return palindrome(n/10,t);

}

public static void main(String[] args){

int a = 252;

int r = palindrome(a,0);

if (r==a)
System.out.print("Yes");
else 
System.out.print("No");

}
}

// with help of algorithm we are subtracting the values of x & y and storing it on gfc(int y) and also storing 

// y value at gfc (int x)  .  then we are performing recursion on that values repetedley till gfc(int y) value 
//becomes 0. then with the help of the termination statement /base case we return the value of gfc(int x);

=============================================================================================

5. Write a Java Program to check whether the Given Number is Prime Number or NOT.

import java.lang.*;
import java.util.*;


class Prime {
    public static int prime(int x, int y) {
        if (x <= 1) {
            return 0;
        }
        if (x == 2) {
            return 1;
        }
        if (y == x) {
            return 2;
        }
        if (x % y == 0) {
            return 0;
        }
        return prime(x, y + 1);
    }

    public static void main(String[] args) {
        int a = 17;
        int b = prime(a, 2);

        if (b == 2) {
            System.out.println("Yes");
        } else {
            System.out.println("No");
        }
    }
}


// we are checking if the no. is less tan one or is 1 then it directey retuns no. else y==x means its 2 then yes

// then we are checking if x is giving 0 modules with the help of rucursive vales of y if find will return 0 which staes not a prime 
=================================================================================================

6. Write a Java Program to check whether the given number is Armstrong Numberer NOT.

import java.util.Scanner;

public class Armstrong {
    // Function to calculate the power of a number
    public static int power(int num, int p) {
        // Base case: if power is 0, return 1
        if (p == 0)
            return 1;
        // Recursive step: multiply num with power(num, p-1)
        return num * power(num, p - 1);
    }

    // Function to count the number of digits in a number
    public static int countDigits(int num) {
        // Base case: if num is 0, return 0
        if (num == 0)
            return 0;
        // Recursive step: increment count and remove the last digit
        return 1 + countDigits(num / 10);
    }

    // Function to check if a number is an Armstrong number
    public static int isArmstrong(int num, int originalNum, int n) {
        // Base case: if num is 0, return 0 if originalNum is 0, -1 otherwise
        if (num == 0)
            return originalNum == 0 ? 0 : -1;
        // Recursive step: extract the last digit, raise it to power n, and add it to the result
        int digit = num % 10;
        return power(digit, n) + isArmstrong(num / 10, originalNum, n);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        scanner.close();

        // Count the number of digits in the input number
        int numOfDigits = countDigits(number);

        // Check if the number is an Armstrong number
        int armstrongSum = isArmstrong(number, number, numOfDigits);

        // Print the result
        if (armstrongSum == number)
            System.out.println(number + " is an Armstrong number.");
        else
            System.out.println(number + " is not an Armstrong number.");
    }
}
===========================================================================================

7. Write a Java Program to check whether the given number is Perfect Numberer NOT.

import java.util.Scanner;

class Perfect {
    // Function to calculate the sum of proper divisors of a number
    public static int sumOfDivisors(int num, int divisor) {
        // Base case: if divisor is greater than or equal to num, return 0
        if (divisor >= num)
            return 0;
        // If num is divisible by divisor, add divisor to sum and recursively call sumOfDivisors
        // with incremented divisor
        if (num % divisor == 0)
            return divisor + sumOfDivisors(num, divisor + 1);
        // If num is not divisible by divisor, recursively call sumOfDivisors with incremented divisor
        return sumOfDivisors(num, divisor + 1);
    }

    // Function to check if a number is a perfect number
    public static boolean isPerfect(int num) {
        // Calculate the sum of proper divisors (excluding num itself)
        int sum = sumOfDivisors(num, 1);
        // If the sum of proper divisors equals the number itself, num is a perfect number
        return sum == num;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        scanner.close();

        // Check if the number is a perfect number
        boolean isPerfectNumber = isPerfect(number);

        // Print the result
        if (isPerfectNumber)
            System.out.println(number + " is a perfect number.");
        else
            System.out.println(number + " is not a perfect number.");
    }
}
===================================================================================================

8. Write a Java Program to check whether the given numbe's are Amicable NumbeCERE NOT.

import java.util.Scanner;

public class Ambicable {
    // Function to calculate the sum of proper divisors of a number
    public static int sumOfDivisors(int num, int divisor) {
        // Base case: if divisor is greater than or equal to num, return 0
        if (divisor >= num)
            return 0;
        // If num is divisible by divisor, add divisor to sum and recursively call sumOfDivisors
        // with incremented divisor
        if (num % divisor == 0)
            return divisor + sumOfDivisors(num, divisor + 1);
        // If num is not divisible by divisor, recursively call sumOfDivisors with incremented divisor
        return sumOfDivisors(num, divisor + 1);
    }

    // Function to check if a number is part of an amicable pair
    public static boolean isAmicable(int num, int sumOfDivisorsNum) {
        // Calculate the sum of proper divisors of num
        int sum = sumOfDivisors(sumOfDivisorsNum, 1);
        // Check if the sum equals num and num is not equal to sumOfDivisorsNum
        return sum == num && num != sumOfDivisorsNum;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        scanner.close();

        // Calculate the sum of proper divisors of the input number
        int sumOfDivisorsNumber = sumOfDivisors(number, 1);

        // Check if the input number is part of an amicable pair
        boolean isAmicableNumber = isAmicable(number, sumOfDivisorsNumber);

        // Print the result
        if (isAmicableNumber)
            System.out.println(number + " is part of an amicable pair.");
        else
            System.out.println(number + " is not part of an amicable pair.");
    }
}

C:\Users\User\Desktop\1.Cdac\4.DSA\Assignment\Assignment 1>javac Ambicable.java

C:\Users\User\Desktop\1.Cdac\4.DSA\Assignment\Assignment 1>java Ambicable
Enter a number: 220
220 is part of an amicable pair.


Sum of Proper Divisors Function (sumOfDivisors()):

Calculates the sum of proper divisors of a given number recursively.
Starts with a divisor of 1 and iterates up to one less than the number itself.
Adds each divisor that evenly divides the number to the sum.
Recursively continues this process until all possible divisors are checked.
Returns the total sum of proper divisors.
Amicable Number Check Function (isAmicable()):

Checks whether a given number is part of an amicable pair.
Takes two parameters: the number to be checked (num) and the sum of proper divisors of another number (sumOfDivisorsNum).
Calculates the sum of proper divisors for sumOfDivisorsNum.
If the sum of proper divisors of sumOfDivisorsNum equals num and num is not equal to sumOfDivisorsNum, returns true, indicating that num is part of an amicable pair.
Main Method:

Reads a number from the user.
Calculates the sum of proper divisors of the input number using the sumOfDivisors() function.
Checks if the input number is part of an amicable pair using the isAmicable() function.
Prints a message indicating whether the input number is part of an amicable pair or not.
This program efficiently determines whether a given number forms part of an amicable pair using recursive functions to calculate the sum of proper divisors and check for amicability.
==============================================================================================

9. Write a Java Program to check whether the given number is Ramanujam's NumberO NOT

import java.util.Scanner;

public class Ramanujan {
    // Function to check whether a number is a Ramanujan number
    public static boolean isRamanujan(int n, int a, int b, int c, int d) {
        // Base case: if a^3 + b^3 equals n, check if c^3 + d^3 also equals n
        if (a * a * a + b * b * b == n) {
            return isRamanujan(n, a, b, c, d, c, d);
        }
        // If a^3 + b^3 doesn't equal n, check next pair (a, b)
        if (a < b) {
            return isRamanujan(n, a + 1, b, c, d);
        }
        // If a > b, reset a and increment b
        if (a >= b) {
            return isRamanujan(n, 1, b + 1, c, d);
        }
        // If a > n^(1/3), no more possible pairs to check, return false
        if (a > Math.pow(n, 1.0 / 3)) {
            return false;
        }
        return false;
    }

    // Overloaded function to check whether a number is a Ramanujan number with given pairs (a, b) and (c, d)
    public static boolean isRamanujan(int n, int a, int b, int c, int d, int origC, int origD) {
        // Base case: if c^3 + d^3 equals n, return true
        if (c * c * c + d * d * d == n) {
            // Check if pairs are distinct
            if (a != c && a != d && b != c && b != d) {
                System.out.printf("%d is a Ramanujan number, %d = %d^3 + %d^3 = %d^3 + %d^3%n",
                        n, n, a, b, origC, origD);
                return true;
            }
        }
        // If c^3 + d^3 doesn't equal n, check next pair (c, d)
        if (c < d) {
            return isRamanujan(n, a, b, c, d + 1, origC, origD);
        }
        // If c > d, reset c and increment d
        if (c >= d) {
            return isRamanujan(n, a, b, origC + 1, origD + 1, origC + 1, origD + 1);
        }
        // If c > n^(1/3), no more possible pairs to check, return false
        if (c > Math.pow(n, 1.0 / 3)) {
            return false;
        }
        return false;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        scanner.close();

        // Check if the number is a Ramanujan number
        boolean isRamanujanNumber = isRamanujan(number, 1, 2, 1, 2);

        // Print the result
        if (!isRamanujanNumber)
            System.out.println(number + " is not a Ramanujan number.");
    }
}

C:\Users\User\Desktop\1.Cdac\4.DSA\Assignment\Assignment 1>java Ramanujan
Enter a number: 1729
1729 is a Ramanujan number, 1729 = 9^3 + 10^3 = 1^3 + 2^3



//This Java program checks whether a given number is a Ramanujan number or not. Here's a brief //explanation of the code:

//The isRamanujan(int n) method iterates through all possible pairs (a, b) where 1 ≤ a < b. It calculates the //sum a^3 + b^3 for each pair.

//For each sum, it calculates the cube root c using Math.cbrt(). If c is an integer greater than b and c^3 equals //the sum, it indicates that the number is a Ramanujan number.

//If a Ramanujan number is found, the method prints the number and the pairs (a, b) and (b, c) such that n = //a^3 //+ b^3 = b^3 + c^3.

//In the main() method, the user is prompted to enter a number. The program then checks if the entered //number is a Ramanujan number using the isRamanujan() method.

//If the entered number is not a Ramanujan number, it prints a message indicating so.

================================================================================================


10. Write a Java Program check whether the given number is Automorphic Number NOT.


import java.util.Scanner;

public class Automorphic {
    // Function to calculate the number of digits in a number
    public static int countDigits(int num) {
        if (num == 0)
            return 0;
        return 1 + countDigits(num / 10);
    }

    // Function to check if a number is automorphic
    public static boolean isAutomorphic(int num, int square) {
        // Base case: if num equals the last few digits of square, return true
        if (num == square % (int) Math.pow(10, countDigits(num)))
            return true;
        // If square is smaller than num, it's not automorphic, return false
        if (square < num)
            return false;
        // Recursively check next digits by squaring num
        return isAutomorphic(num, square / 10);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt();
        scanner.close();

        // Calculate the square of the input number
        int square = number * number;

        // Check if the input number is an automorphic number
        boolean isAutomorphicNumber = isAutomorphic(number, square);

        // Print the result
        if (isAutomorphicNumber)
            System.out.println(number + " is an Automorphic number.");
        else
            System.out.println(number + " is not an Automorphic number.");
    }
}

C:\Users\User\Desktop\1.Cdac\4.DSA\Assignment\Assignment 1>javac Automorphic.java

C:\Users\User\Desktop\1.Cdac\4.DSA\Assignment\Assignment 1>java Automorphic
Enter a number: 625
625 is an Automorphic number.


countDigits(int num): This function calculates the number of digits in a given number num recursively. It returns 0 if the number is 0, otherwise it adds 1 to the count and recursively divides the number by 10 until it becomes 0.

isAutomorphic(int num, int square): This function checks whether a given number num is an automorphic number by comparing it with the square of num. It recursively checks if num equals the last few digits of square by continuously dividing square by 10.

In the main() method:

It reads a number from the user.
It calculates the square of the input number.
It checks if the input number is an automorphic number using the isAutomorphic() function.
It prints the result accordingly.





==============================================================================================