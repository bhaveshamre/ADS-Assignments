Write implementation of below sorting algorithms

1. Bubble Sort

public class BubbleSort {
    public static void bubbleSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++) {
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j] > arr[j+1]) {
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
}


2. Quick Sort

public class QuickSort {
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pi = partition(arr, low, high);
            quickSort(arr, low, pi - 1);
            quickSort(arr, pi + 1, high);
        }
    }

    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i+1];
        arr[i+1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }
}


3. Selection Sort

public class SelectionSort {
    public static void selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++) {
            int minIndex = i;
            for (int j = i+1; j < n; j++) {
                if (arr[j] < arr[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }
}


4. Insertion Sort

public class InsertionSort {
    public static void insertionSort(int[] arr) {
        int n = arr.length;
        for (int i = 1; i < n; ++i) {
            int key = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }
}


5. Merge Sort


import java.util.Arrays;

public class MergeSort {
    public static void mergeSort(int[] arr) {
        if (arr.length <= 1) {
            return;
        }
        int mid = arr.length / 2;
        int[] left = Arrays.copyOfRange(arr, 0, mid);
        int[] right = Arrays.copyOfRange(arr, mid, arr.length);
        mergeSort(left);
        mergeSort(right);
        merge(arr, left, right);
    }

    private static void merge(int[] arr, int[] left, int[] right) {
        int i = 0, j = 0, k = 0;
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }
        while (i < left.length) {
            arr[k++] = left[i++];
        }
        while (j < right.length) {
            arr[k++] = right[j++];
        }
    }
}


6. Quick Sort

public class BubbleSortStrings {
    public static void bubbleSort(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++) {
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j].compareTo(arr[j+1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
}



7. Sorting Strings using Bubble Sort

public class BubbleSortStrings {
    public static void bubbleSort(String[] arr) {
        int n = arr.length;
        for (int i = 0; i < n-1; i++) {
            for (int j = 0; j < n-i-1; j++) {
                if (arr[j].compareTo(arr[j+1]) > 0) {
                    String temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
    }
}


9. Bubble Sort for Linked List by Swapping nades
..
public class BubbleSortDoublyLinkedList {
    static class ListNode {
        int val;
        ListNode next, prev;
        ListNode(int x) { val = x; }
    }

    public static ListNode bubbleSort(ListNode head) {
        if (head == null || head.next == null) return head;
        boolean swapped;
        do {
            swapped = false;
            ListNode curr = head;
            while (curr.next != null) {
                if (curr.val > curr.next.val) {
                    if (curr.prev != null) {
                        curr.prev.next = curr.next;
                    } else {
                        head = curr.next;
                    }
                    curr.next.prev = curr.prev;
                    ListNode temp = curr.next.next;
                    curr.next.next = curr;
                    curr.next.prev = curr.prev;
                    curr.prev = curr.next;
                    curr.next = temp;
                    swapped = true;
                } else {
                    curr = curr.next;
                }
            }
        } while (swapped);
        return head;
    }
}

10 Bubble Sort On Doubly Linked List


public class BubbleSortDoublyLinkedList {
    static class ListNode {
        int val;
        ListNode next, prev;
        ListNode(int x) { val = x; }
    }

    public static ListNode bubbleSort(ListNode head) {
        if (head == null || head.next == null) return head;
        boolean swapped;
        do {
            swapped = false;
            ListNode curr = head;
            while (curr.next != null) {
                if (curr.val > curr.next.val) {
                    if (curr.prev != null) {
                        curr.prev.next = curr.next;
                    } else {
                        head = curr.next;
                    }
                    curr.next.prev = curr.prev;
                    ListNode temp = curr.next.next;
                    curr.next.next = curr;
                    curr.next.prev = curr.prev;
                    curr.prev = curr.next;
                    curr.next = temp;
                    swapped = true;
                } else {
                    curr = curr.next;
                }
            }
        } while (swapped);
        return head;
    }
}
